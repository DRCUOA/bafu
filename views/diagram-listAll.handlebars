
<div class="filters">
  <label for="diagram-type-filter">Show Diagram Type:</label>
  <select id="diagram-type-filter">
    <option value="">All</option>
    <option value="Class">Class Diagram</option>
    <option value="UseCase">Use Case Diagram</option>
    <option value="Sequence">Sequence Diagram</option>
    <option value="Activity">Activity Diagram</option>
    <option value="StateMachine">State Machine Diagram</option>
    <option value="Component">Component Diagram</option>
    <option value="Deployment">Deployment Diagram</option>
  </select>
</div>
<h1>Existing Diagrams</h1>
{{#if diagrams}}
<div class="card-deck">
  {{#each diagrams}}
  <div class="card {{diagram_type_name}}" style="animation-delay: {{@index}}s;">
    <h5 class="card-title">{{diagram_name}}<span id="idRef" data-diagramID="{{id}}">{{id}}</span>{{diagram_type_name}}</h5>
    <div class="card-body">
      <p class="label">Description:</p>
      <p id="description">{{description}}</p>
      <p class="label">Revision Notes: </p>
      <p id="revision-notes">{{revision_notes}}</p>
    </div>
  </div>
  {{/each}}
</div>
{{else}}
<p>No diagrams found.</p>
{{/if}}

<style>
  .header {
    padding-top: 70px;
  }

  nav {
    position: fixed;
    top: 0;
    z-index: 1;
    background-color: #fff;
  }

  h1 {
    position: fixed;
    height: 2em;
    top: -30px;
    left: 0;
    right: 0;
    z-index: 1;
    color: orangered;
    background-color: #e9e9e9;
    border-bottom: 2px solid rgb(127, 127, 127);
    padding: 5px;
  }

  .filters {
    margin-top: 80px;
  }

  .card-deck {
    display: flex;
    max-width: calc(100% - 10px);
    flex-wrap: wrap;
    justify-content: space-between;
    margin-top: 5px;
  }

  .card {
    width: 90%;
    max-width: calc(50% - 10px);
    margin-bottom: 20px;
    border: 1px solid #707070;
    border-radius: 10px;
    box-sizing: border-box;
    opacity: 1;
    box-shadow: 0px 5px 100px rgba(0, 0, 0, 0.25);
    animation: fadeIn .0s ease forwards;
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  .card:nth-child(even) {
    animation-delay: calc(0s + {
          {
          @index
        }
      }

      s);
  }

  .card:nth-child(odd) {
    animation-delay: {
        {
        @index
      }
    }

    s;
  }

  .card-body {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    height: 20em;
    background-color: rgba(139, 205, 205, .4);
  }

  .card-title {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    margin: 5px;
    padding: 10px;
    font-size: 24px;
    font-weight: bold;
    border-bottom: 1px solid rgb(228, 228, 228);
  }


  .card-title span {
    color: white;
    font-size: 12px;
    background-color: orangered;
    padding: 10px;
    border-radius: 20px;
    margin-left: 10px;
  }

  #description {
    height: 10em;
    width: 90%;
    margin: 10px;
    text-align: justify;
    overflow: hidden;
  }

  .label {
    color: #bcbcbc;
    margin: 10px;
    text-align: justify;
  }

  #revision-notes {
    height: 5em;
    width: 90%;
    margin: 10px;
    text-align: justify;
    border: 2px dashed rgb(127, 127, 130);
  }

  @media only screen and (max-width: 760px) {
    .card {
      width: 100%;
      margin: auto;
    }
  }
</style>
<script>
  // add event listener to the diagram type filter dropdown
  const diagramTypeFilter = document.querySelector("#diagram-type-filter");
  diagramTypeFilter.addEventListener("change", () => {
    const selectedType = diagramTypeFilter.value;
    const cards = document.querySelectorAll(".card");
    cards.forEach(card => {
      if (selectedType === "" || card.classList.contains(selectedType)) {
        card.style.display = "block";
      } else {
        card.style.display = "none";
      }
    });
  });
  // add event listeners to the cards displayed to open detail view on click
  const diagramsDisplayed = document.querySelectorAll(".card");
  diagramsDisplayed.forEach(diagram => {
    const idRef = diagram.querySelector('#idRef');
    const id = parseInt(idRef.getAttribute('data-diagramID'));
    diagram.addEventListener('click', () => {
      window.location.href = `/diagrams/${id}`;
    });
  });
</script>