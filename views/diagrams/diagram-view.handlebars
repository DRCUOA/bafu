{{!-- The diagram-view.handlebars file is the view for the diagram page. It displays the diagram image, description, and
UML code. It also has buttons to modify the diagram, delete the diagram, and print the diagram. --}}

<button onclick=gotoDiagrams()>Back to List</button>
<button id="modify">Modify Diagram</button>
<button onclick="copyCode(`{{diagram.diagram_code}}`)">New Diagram</button>
<button id="delete" disabled>Delete Diagram</button>
<button onclick="printDiagram()">Print Diagram</button>
<h1>Name: {{diagram.diagram_name}}</h1>
<div class="diagram-image">
  <img src="{{diagram.diagram_img_file_path}}" alt="{{diagram.diagram_name}}">
</div>
<div class="diagram-description">
  <p><strong>Description: </strong></p>
  <p id="description">{{diagram.description}}</p>
  <div id="description-preview"></div>
  <br>
  <p>Revision Notes:</p>
  <p>{{diagram.revision_notes}}</p>
  <br>
  <p>UML Diagram Code:</p>
  <pre>{{diagram.diagram_code}}</pre>
</div>
<button onclick=gotoDiagrams()>Back to List</button>
<button id="modify">Modify Diagram</button>
<button onclick="copyCode(`{{diagram.diagram_code}}`)">New Diagram</button>
<button id="delete" disabled>Delete Diagram</button>

<style>
  h1 {
    font-size: 32px;
    margin: 20px 0;
    color: orangered;
  }

  .diagram-image {
    animation: fadeIn .5s ease forwards;
    margin-left: 20px;
    border: 1px solid orangered;
    max-width: calc(85% - 20px);
    max-height: calc(55% - 20px);
    opacity: 0;
    margin-bottom: 20px;
    box-shadow: 0px 5px 100px rgba(0, 0, 0, 0.25);
  }

  .diagram-image img {
    margin: auto;
    display: block;
  }

  .diagram-description {
    animation: fadeIn .5s ease forwards;
    opacity: 1;
    margin-bottom: 20px;
    padding: 20px;
    background-color: rgba(139, 205, 205, .4);
    box-shadow: 0px 5px 100px rgba(0, 0, 0, 0.25);
  }

  .diagram-description>p:first-child {
    display: inline;
  }

  .diagram-description>div {
    margin-top: 10px;
    width: 100%;
    min-height: 10em;
    border: 1px solid gray;
    padding: 5px;
  }

  .diagram-description>div>h5 {
    font-size: 1.2EM;
    margin-top: 5px;
    margin-left: 5px;
  }

  .diagram-description>div>p {
    margin-top: 10px;
    font-size: 16px;
    line-height: 1.5;
  }

  pre {
    white-space: pre-wrap;
    font-size: 16px;
    font-family: "Courier New", Courier, monospace;
    color: #212529;
    background-color: #f8f9fa;
    border: 1px solid #dee2e6;
    padding: 10px;
    margin: 10px 0;
    max-height: 300px;
    overflow-y: auto;
  }

  button {
    font-size: 16px;
    padding: 10px;
    margin: 10px;
    background-color: orangered;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: opacity 0.3s ease;
  }

  button:hover {
    opacity: 0.8;
  }

  #description {
    display: none;
  }

  @keyframes fadeIn {
    0% {
      opacity: 0;
    }

    50% {
      opacity: 0.2;
    }

    75% {
      opacity: 0.5;
    }

    100% {
      opacity: 1;
    }
  }
</style>

<script>
  function gotoDiagrams() {
    window.location.href = "/diagrams/diagrams";
  }

  function copyCode(text) {
    navigator.clipboard.writeText(text)
      .then(() => {
        console.log("Text copied to clipboard");
        setTimeout(() => {
          window.location.href = "/diagrams/diagrams/new";
        }, 100);
      })
      .catch((err) => {
        console.error("Failed to copy text: ", err);
      });
  }

  // Convert the Markdown input to HTML using Showdown.js
  const converter = new showdown.Converter();

  // Update the preview of the "description" input
  const descriptionInput = document.getElementById('description');
  const descriptionPreview = document.getElementById('description-preview');

  const htmlDescription = converter.makeHtml(descriptionInput.textContent.trim());
  descriptionPreview.innerHTML = htmlDescription;

 function printDiagram() {
  // Get the HTML code of the diagram and description components
  const diagramHTML = document.querySelector('.diagram-image').outerHTML;
  const descriptionHTML = document.querySelector('.diagram-description > div#description-preview').outerHTML;

  // Combine the HTML code into a single string
  const imagePath = window.location.origin + '{{diagram.diagram_img_file_path}}';
  const html = `
    <html>
      <head>
        <title>{{diagram.diagram_name}}</title>
        <link rel="stylesheet" type="text/css" href="/css/print.css">
      </head>
      <body>
        <h1>{{diagram.diagram_name}}</h1>
  
          <div id="diagram-image">
          <img src="${imagePath}" alt="{{diagram.diagram_name}}">
            <div id="diagram-description">
          ${descriptionHTML}
        </div>
        </div>
      </body>
    </html>
  `;

 // Open the system print preview dialog
  const printWindow = window.open('', '_blank');
  printWindow.document.open();
  printWindow.document.write(html);
}
</script>